# -*- coding: utf-8 -*-
"""Time_Sensitive_Bubble_Chart_Analysis_of_High_Engagement_Apps_by_Size,_Rating,_and_Installs_in_Selected_Categories.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/shashwat8004/Time-Based-Bubble-Chart-of-High-Engagement-Apps-in-Select-Categories/blob/main/Time_Sensitive_Bubble_Chart_Analysis_of_High_Engagement_Apps_by_Size%2C_Rating%2C_and_Installs_in_Selected_Categories.ipynb
"""

import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import pytz

"""## With some real data from Kaggele"""

# Load dataset (replace with actual path if needed)
df = pd.read_csv("googleplaystore.csv")

# Convert 'Size' to numeric (ignoring errors)
def convert_size(size):
    if isinstance(size, str):
        if "M" in size:
            return float(size.replace("M", ""))
        elif "k" in size:
            return float(size.replace("k", "")) / 1000  # Convert KB to MB
        else:
            return np.nan  # If unknown size
    return size

df["Size_MB"] = df["Size"].apply(convert_size)

# Convert 'Installs' and 'Reviews' to numeric safely
df["Installs"] = df["Installs"].str.replace("[+,]", "", regex=True)
df["Installs"] = pd.to_numeric(df["Installs"], errors="coerce")  # Handle 'Free' values

df["Reviews"] = pd.to_numeric(df["Reviews"], errors="coerce")  # Convert safely

# Drop rows with NaN in essential columns
df = df.dropna(subset=["Size_MB", "Rating", "Installs", "Reviews"])

# Function to check if current time is between 5 PM and 7 PM IST
def is_time_window():
    ist = pytz.timezone("Asia/Kolkata")
    current_time = datetime.now(ist)
    hour = current_time.hour
    return 17 <= hour < 19  # 3 PM to 5 PM IST

# Function to create and display the bubble chart
def create_bubble_chart():
    # Apply filters
    filtered_df = df[
        (df["Rating"] >= 4.0) &
        (df["Size_MB"] >= 10) &
        (df["Last Updated"].str.startswith("January", na=False)) &
        (df["Installs"] > 50000) &
        (df["Reviews"] > 500)
    ]

    # Check if data is available after filtering
    if filtered_df.empty:
        print("No data available after applying filters.")
        return

    # Create bubble chart using Plotly Express
    fig = px.scatter(
        filtered_df,
        x="Size_MB",
        y="Rating",
        size="Installs",
        color="Category",
        hover_data=["App", "Reviews", "Installs"],
        title="App Size vs Rating (Bubble Size = Installs)",
        labels={
            "Size_MB": "App Size (MB)",
            "Rating": "Average Rating",
            "Installs": "Number of Installs"
        },
        size_max=80  # Increase size for better readability
    )

    # Update layout for better readability
    fig.update_layout(
        width=1200,
        height=700,
        showlegend=True,
        plot_bgcolor="white",
        paper_bgcolor="white",
        font=dict(size=14)
    )

    # Show the plot
    fig.show()

# Main execution logic
if is_time_window():
    print("Displaying bubble chart (Current time is between 5 PM IST to 7 PM IST)")
    create_bubble_chart()
else:
    print("The bubble chart is only available between 5 PM IST to 7 PM IST.")
    current_time_ist = datetime.now(pytz.timezone("Asia/Kolkata")).strftime("%H:%M:%S")
    print(f"Current IST time: {current_time_ist}")

# Display sample of the filtered data (for verification)
filtered_sample = df[
    (df["Rating"] >= 4.0) &
    (df["Size_MB"] >= 10) &
    (df["Last Updated"].str.startswith("January", na=False)) &
    (df["Installs"] > 50000) &
    (df["Reviews"] > 500)
].head()

print("\nSample of filtered data:")
print(filtered_sample)
